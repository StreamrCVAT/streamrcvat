ASSUMPTIONS:
1) YOLO coordinates for all the frames present
2) Linear Interpolation coordinates for all the frames present
3) Human annotation required for the first 32 frames

Algorithm:
0) Select the paths
1) Annotate the first 32 frames (Prediction will not be done & No model training) [Display in UI that no prediction will be done]
2) After annotating first 32 frames -> Model training (Creation of Base models for all the sides)
3) Save the 4 different models
4) Move to the next frame
5) Find the 4 different strips -> Pass them into each of the base models -> Predict the possible coordinates (Final output = YOLO + ModelB's Predicted error)
6) Display the final output on the UI - Display all the 3 boxes (Final output, YOLO, Linear Interpolation)
7) If no changes for every side
	Then save the final output and move to the next frame
8) If changes found in any one or more side
	* Find the side along with the (Change = New human annotation - YOLO output)
	* Model B training based on Original side Strip + Change
9) Go to step number 4



Algo:

l_model = base_model(32);
r_model
t_mdoel
b_model


left_model()
    error_yolo = L_MODEL.PREDICT(l_strip);
    return yolo_output_erro_yolo;

retrain(side)
    if(side == left) 
        l_model.fit(strip, yolo_line-human_line);



for frame in frames
    left_line = left_model();
    right_line = right_model();
    bot_line
    top_line
    
    draw a modelB box on the UI
    
    //after clickign next
    
    check if error is there
    if (error)
        side = chk_side();
        retrain(side);


Dataset - 385 - 970


RELATED TO YOLO Model (JAN 28, 2021)

1) When exiting the while loop (alertFrame32), start tracking the object based on previous frame
2) Write the tracked object coordinate in new text file (Track the YOLO output live) -> YOLO_OUTPUT_TRACKED_PATH -> Display them in the UI
3) On reaching the 33rd frame, create 4 different base models
4) Check code for Linear interpolation (https://github.com/sanjaytharagesh31/Annotation/blob/prototype/Old%20trials/linear_interpolation_code.py), and decide a pipeline


TODO: Feb 28, 2021
1) Call models.model from outside main.py
2) Call outside global_params.py into models.model.global_params
3) Modularizing model.py 
4) Connecting Front-end to Back-end using API (optional)
5) Testing UI + Backend
6) Find alternative for reading files from UI 
7) Change absolute path in batch_train()

TODO: March 14, 2021

General
--> import files inside models folder has to be rewritten
1) Make previous button only to view the frame and coordinates (not to modify the coordinates)
2) On clicking Upload button - change default to open current directory
3) What is reset button functionality?
4) Next button not working.

API
1) Make a condition check in the front-end for the frame number.
    If frame number >= 32, then make an API POST call with parameter as the frame filename and frame number.


When at 32:
    1. Train base models
    2. Predict for 33
When at 33:
    1. If error is there    
        a. Retrain the model based on latest changes 
    2. Predict for 34